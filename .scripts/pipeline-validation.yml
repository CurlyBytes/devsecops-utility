# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- feat/*


pool:
  vmImage: ubuntu-20.04
resources:
  containers:
  - container: dcl-azdo-container
    image: acidglshared.azurecr.io/terraform-devsecops-utility-shared:latest
    endpoint: terraform-az-dg
variables:
  - group: "eac-validation"
  - group: "tenant1"

stages:
  - stage: ContinousIntegration
    displayName: Continous Integration
    jobs:
      # - job: BareMinimum
      #   displayName: 'CICD - Unit Test'
      #   # container: dcl-azdo-container
      #   steps:
      #     - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
      #       parameters:
      #         filePath: "$(System.DefaultWorkingDirectory)/.scripts/utilities/pester-testing-eac.ps1"
      #         displayName: "Task - Unit Tests"
      #         targetType: "filepath"
      #         arguments: "-ModulePath $(System.DefaultWorkingDirectory)/tests/azure-devops -ResultsPath $(System.DefaultWorkingDirectory)/Publish -Organizationname curlybytes -AzdoPatToken $(AzdoPatToken) -TestType unit-test -Publish"
      #         progressPreference: "silentlyContinue"
      #         failOnStderr: false
      #         ignoreLASTEXITCODE: true
      #         pwsh: true

      #     - template: ../src/pipeline-as-code/azure-devops/components/task_publish_code_coverage_result.yml
      #       parameters:
      #         condition: succeededOrFailed()
      #         displayName: "Task - Publish Pester Code Coverage"
      #         codeCoverageTool: "JaCoCo"
      #         summaryFileLocation: "**/Pester-unit-test-CodeCoverage.xml"
      #         pathToSources: "$(System.DefaultWorkingDirectory)"
      #         failIfCoverageEmpty: true
      #         additionalCodeCoverageFiles: "$(System.DefaultWorkingDirectory)/tests/**/**/*.ps*"

      #     - template: ../src/pipeline-as-code/azure-devops/components/task_publish_test_results.yml
      #       parameters:
      #         condition: succeededOrFailed()
      #         displayName: "Task - Publish Pester Tests Result"
      #         testResultsFormat: "NUnit"
      #         testResultsFiles: "**/Pester-unit-test.xml"
      #         mergeTestResults: true
      #         failTaskOnFailedTests: true
      #         testRunTitle: "Yaml_UnitTest_$(Build.BuildId)_$(Agent.OS)_$(Agent.OSArchitecture)($(Agent.MachineName))"
      #         buildPlatform: "Any CPU"
      #         buildConfiguration: "Release"

      #     - task: Docker@2
      #       displayName: "Build Terraform Image"
      #       inputs:
      #         containerRegistry: 'terraform-az-dg'
      #         repository: 'terraform-devsecops-utility-shared'
      #         command: 'buildAndPush'
      #         Dockerfile: '$(Build.SourcesDirectory)/src/infrastructure-as-code/terraform/Dockerfile'
      #         buildContext: '$(Build.SourcesDirectory)/src/infrastructure-as-code/terraform'
      #         tags: 'latest'

      - job: TerraformPlan1
        displayName: 'CICD - TF Plan Tenant 1'
        container: dcl-azdo-container
        steps:
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/src/infrastructure-as-code/terraform/samples/az-standard-rg'
              Contents: '**'
              TargetFolder: '$(Agent.TempDirectory)/environment'
          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                $filename = "backend.tf"
                $path = "$(Agent.TempDirectory)/environment"
                $pathandfile = "$path\$filename"
                if ((Test-Path -Path $pathandfile) -eq $false){
                    New-Item -Path $path -Name $filename -ItemType "file" -Value "terraform { `r`n backend ""azurerm"" {`r`n} `r`n }"
                }
              displayName: "Task - Inject State Management"
              targetType: "inline"
              progressPreference: "silentlyContinue"
              failOnStderr: true
              pwsh: true
              workingDirectory: $(Agent.TempDirectory)/environment
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 
          - task: file-creator@6
            inputs:
              filepath: '$(Agent.TempDirectory)/environment/azure.conf'
              filecontent: |
                resource_group_name  = "rg-test-rnd"
                storage_account_name = "saterraformsbx1"
                container_name       = "terraformstatestoragesandbox"
                key                  = "devsecops-azure-resource-group-terraform-sbx.tfstate"
                access_key           = "$(tf_backend_storage_account_key)"
              fileoverwrite: true
              endWithNewLine: true
              verbose: true
          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                terraform init -backend-config='$(Agent.TempDirectory)/environment/azure.conf' -input=false  -reconfigure
              displayName: "Task - Terraform Initialize"
              targetType: "inline"
              pwsh: true
              workingDirectory: $(Agent.TempDirectory)/environment
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 

          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                terraform fmt -check=true -write=false -diff=true 
                terraform validate 
              displayName: "Task - Validate"
              targetType: "inline"
              progressPreference: "silentlyContinue"
              failOnStderr: false
              ignoreLASTEXITCODE: true
              pwsh: true
              workingDirectory: $(Agent.TempDirectory)/environment
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 

          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                terraform plan -compact-warnings -input=false -out="tfplan"
              displayName: "Task - Plan"
              targetType: "inline"
              pwsh: true
              workingDirectory: $(Agent.TempDirectory)/environment
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 

          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                terraform show -json tfplan > terraform.json
                $plan = $(terraform show -json tfplan | ConvertFrom-Json)
                $actions = $plan.resource_changes.change.actions
                
                Write-Host "Terraform actions : $actions"
                if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
                {
                  Write-Host "Terraform will perform the following actions : $actions"
                  Write-Host "##vso[task.setvariable variable=ANYTFCHANGES;]true"
                }
                else
                {
                  Write-Host "There is no change detected in Terraform tfplan file"
                }

                $resourceChanges = $plan.resource_changes
                $add = ($resourceChanges | Where {$_.change.actions -contains "create"}).length
                $change = ($resourceChanges | Where {$_.change.actions -contains "update"}).length
                $remove = ($resourceChanges | Where {$_.change.actions -contains "delete"}).length
                $totalChanges = $add + $change + $remove      
                Write-Host "There are $totalChanges ($add to add, $change to change, $remove to remove)"
              displayName: "Task - Change Drift"
              targetType: "inline"
              pwsh: true
              workingDirectory: $(Agent.TempDirectory)/environment

          # - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
          #   parameters:
          #     script: "terraform apply -input=false -auto-approve"
          #     displayName: "Task - Apply"
          #     targetType: "inline"
          #     pwsh: true
          #     workingDirectory: $(Pipeline.Workspace)/cocoy
          #     env:
          #       AAD_USE_MICROSOFT_GRAPH: 1
          #       TF_IN_AUTOMATION: true
          #       ARM_CLIENT_ID: $(sp_clientId)
          #       ARM_CLIENT_SECRET: $(sp_clientSecret)
          #       ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
          #       ARM_TENANT_ID: $(sp_tenantId) 

          - task: TerraformOutput@1
            inputs:
              outputFilePath: '$(Agent.TempDirectory)/environment/tfplan'
              artifactName: 'sbx'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Agent.TempDirectory)/environment/tfplan'
              artifactName: 'TerraformPlan'
              publishLocation: 'Container'
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Agent.TempDirectory)/environment/.terraform.lock.hcl'
              artifactName: 'TerraformPlan'
              publishLocation: 'Container'
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Agent.TempDirectory)/environment/.terraform'
              artifactName: 'TerraformPlan'
              publishLocation: 'Container'
          # - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
          #   parameters:
          #     script: "terraform destroy -input=false -auto-approve"
          #     displayName: "Task - Destroy"
          #     targetType: "inline"
          #     pwsh: true
          #     workingDirectory: $(Pipeline.Workspace)/cocoy
          #     env:
          #       AAD_USE_MICROSOFT_GRAPH: 1
          #       TF_IN_AUTOMATION: true
          #       ARM_CLIENT_ID: $(sp_clientId)
          #       ARM_CLIENT_SECRET: $(sp_clientSecret)
          #       ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
          #       ARM_TENANT_ID: $(sp_tenantId) 

      - job: TerraformAppl
        displayName: 'CICD - TF Apply Tenant 1'
        dependsOn: TerraformPlan1
        container: dcl-azdo-container
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'TerraformPlan'
              targetPath: '$(Agent.TempDirectory)/environment'

          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                $filename = "backend.tf"
                $path = "$(Agent.TempDirectory)/environment"
                $pathandfile = "$path\$filename"
                if ((Test-Path -Path $pathandfile) -eq $false){
                    New-Item -Path $path -Name $filename -ItemType "file" -Value "terraform { `r`n backend ""azurerm"" {`r`n} `r`n }"
                }
              displayName: "Task - Inject State Management"
              targetType: "inline"
              progressPreference: "silentlyContinue"
              failOnStderr: true
              pwsh: true
              workingDirectory: $(Agent.TempDirectory)/environment
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 
          - task: file-creator@6
            inputs:
              filepath: '$(Agent.TempDirectory)/environment/azure.conf'
              filecontent: |
                resource_group_name  = "rg-test-rnd"
                storage_account_name = "saterraformsbx1"
                container_name       = "terraformstatestoragesandbox"
                key                  = "devsecops-azure-resource-group-terraform-sbx.tfstate"
                access_key           = "$(tf_backend_storage_account_key)"
              fileoverwrite: true
              endWithNewLine: true
              verbose: true

          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                terraform init -lockfile=readonly
                terraform apply -input=false -auto-approve
              displayName: "Task - Apply"
              targetType: "inline"
              pwsh: true
              workingDirectory: $(Agent.TempDirectory)/environment
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 
