# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- feat/*


pool:
  vmImage: ubuntu-20.04
resources:
  containers:
  - container: dcl-azdo-container
    image: acidglshared.azurecr.io/terraform-devsecops-utility-shared:635
    endpoint: terraform-az-dg
    volumes:
      - ./src/infrastructure-as-code/terraform:/code
variables:
  - group: "eac-validation"
  - group: "tenant1"

stages:
  - stage: ContinousIntegration
    displayName: Continous Integration
    jobs:
      - job: BareMinimum
        displayName: 'CICD - Unit Test'
        # container: dcl-azdo-container
        steps:
          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              filePath: "$(System.DefaultWorkingDirectory)/.scripts/utilities/pester-testing-eac.ps1"
              displayName: "Task - Unit Tests"
              targetType: "filepath"
              arguments: "-ModulePath $(System.DefaultWorkingDirectory)/tests/azure-devops -ResultsPath $(System.DefaultWorkingDirectory)/Publish -Organizationname curlybytes -AzdoPatToken $(AzdoPatToken) -TestType unit-test -Publish"
              progressPreference: "silentlyContinue"
              failOnStderr: false
              ignoreLASTEXITCODE: true
              pwsh: true

          - template: ../src/pipeline-as-code/azure-devops/components/task_publish_code_coverage_result.yml
            parameters:
              condition: succeededOrFailed()
              displayName: "Task - Publish Pester Code Coverage"
              codeCoverageTool: "JaCoCo"
              summaryFileLocation: "**/Pester-unit-test-CodeCoverage.xml"
              pathToSources: "$(System.DefaultWorkingDirectory)"
              failIfCoverageEmpty: true
              additionalCodeCoverageFiles: "$(System.DefaultWorkingDirectory)/tests/**/**/*.ps*"

          - template: ../src/pipeline-as-code/azure-devops/components/task_publish_test_results.yml
            parameters:
              condition: succeededOrFailed()
              displayName: "Task - Publish Pester Tests Result"
              testResultsFormat: "NUnit"
              testResultsFiles: "**/Pester-unit-test.xml"
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: "Yaml_UnitTest_$(Build.BuildId)_$(Agent.OS)_$(Agent.OSArchitecture)($(Agent.MachineName))"
              buildPlatform: "Any CPU"
              buildConfiguration: "Release"

          - task: Docker@2
            displayName: "Build Terraform Image"
            inputs:
              containerRegistry: 'terraform-az-dg'
              repository: 'terraform-devsecops-utility-shared'
              command: 'buildAndPush'
              Dockerfile: '$(Build.SourcesDirectory)/src/infrastructure-as-code/terraform/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)/src/infrastructure-as-code/terraform'
              tags: 'latest'

      - job: TerraformPlan1
        displayName: 'CICD - TF Plan Tenant 1'
        container: dcl-azdo-container
        steps:
          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: "terraform init"
              displayName: "Task - Terraform Initialize"
              targetType: "inline"
              progressPreference: "silentlyContinue"
              failOnStderr: false
              ignoreLASTEXITCODE: true
              pwsh: true
              workingDirectory: $(System.DefaultWorkingDirectory)/src/infrastructure-as-code/terraform/samples/az-standard-rg
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 
          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: |
                terraform fmt -check=true -write=false -diff=true
                terraform validate 
              displayName: "Task - Validate"
              targetType: "inline"
              progressPreference: "silentlyContinue"
              failOnStderr: false
              ignoreLASTEXITCODE: true
              pwsh: true
              workingDirectory: $(System.DefaultWorkingDirectory)/src/infrastructure-as-code/terraform/samples/az-standard-rg
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 

          - template: ../src/pipeline-as-code/azure-devops/components/task_powershell.yml
            parameters:
              script: "terraform plan -compact-warnings -input=false -out=terraform.tfplan"
              displayName: "Task - Validate"
              targetType: "inline"
              progressPreference: "silentlyContinue"
              failOnStderr: false
              ignoreLASTEXITCODE: true
              pwsh: true
              workingDirectory: $(System.DefaultWorkingDirectory)/src/infrastructure-as-code/terraform/samples/az-standard-rg
              env:
                AAD_USE_MICROSOFT_GRAPH: 1
                TF_IN_AUTOMATION: true
                ARM_CLIENT_ID: $(sp_clientId)
                ARM_CLIENT_SECRET: $(sp_clientSecret)
                ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
                ARM_TENANT_ID: $(sp_tenantId) 