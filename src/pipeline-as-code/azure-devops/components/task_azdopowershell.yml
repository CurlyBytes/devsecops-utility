# A Native Devops Powershell Task
---
parameters:
  - name: yamlPipelineConfiguration
    displayName: "The Dynamic Object Pipeline Configuration for Clean Setup with Coalesce"
    type: object
    default: []
  - name: projectName
    displayName: "Project Name of Product/Service"
    type: string
    default: "$(Build.Repository.Name)"
  - name: instrumentationKey
    displayName: "A public key parameter for app insights instrumentation key"
    type: string
    default: "xxxxxxxxx"
  - name: powershellScriptFullFilePath
    displayName: "The yaml relative filepath location"
    type: string
    default: "$(Pipeline.Workspace)/s/template-cicd"
  - name: name
    displayName: "Unique Identity of the process task"
    type: string
    default: ""
  - name: displayName
    displayName: "Display name in the GUI pipeline"
    type: string
    default: "Task - Powershell Execution"
  - name: condition
    displayName: "Trigger Condition to run the Steps"
    type: string
    default: "succeeded()"
  - name: continueOnError
    displayName: "Switch to continue the task even it is failure"
    type: boolean
    default: false
  - name: script
    displayName: "Powershell raw command"
    type: string
    default: echo "Hello World"
  - name: workingDirectory
    displayName: "File location of powershell execution"
    type: string
    default: "$(System.DefaultWorkingDirectory)"
  - name: errorActionPreference
    displayName: "Powershell Action whenever error occurs"
    type: string
    default: "default"
    values:
      - default
      - silentlyContinue
  - name: failOnStderr
    displayName: "Is halt and error upon a failure on the script occur"
    type: boolean
    default: true
  - name: ignoreLASTEXITCODE
    displayName: "Still continue the upon script command on exit"
    type: boolean
    default: false
  - name: env
    displayName: "Environment variable holder in Powershell"
    type: object
    default: []
  - name: enabled
    displayName: "Switch to enable or disable task processing"
    type: boolean
    default: true
  - name: target
    displayName: "Number of times for retry count upon error"
    type: string
    default: "host"

steps:
  - template: azdo_container_step.yml
    parameters:
      yamlPipelineConfiguration: ${{ parameters.yamlPipelineConfiguration }}
      projectName: "${{ coalesce( parameters.yamlPipelineConfiguration.baseline.projectName, parameters.projectName) }}"
      instrumentationKey: "${{ coalesce( parameters.yamlPipelineConfiguration.baseline.instrumentationKey, parameters.instrumentationKey) }}"
      yamlFullFilePath: "src/pipeline-as-code/azure-devops/components/task_azdopowershell.yml"
      powershellScriptFullFilePath: "${{ coalesce( parameters.yamlPipelineConfiguration.baseline.powershellScriptFullFilePath, parameters.powershellScriptFullFilePath) }}"
      objectTask:
        task: "powershell"
        errorActionPreference: "${{ parameters.errorActionPreference }}" # Unless otherwise specified, the error action preference defaults to the value stop. See the following section for more information.
        failOnStderr: ${{ parameters.failOnStderr }} # Fail the task if output is sent to Stderr?
        ignoreLASTEXITCODE: ${{ parameters.ignoreLASTEXITCODE }} # Check the final exit code of the script to determine whether the step succeeded?
        workingDirectory: "${{ parameters.workingDirectory }}" # Start the script with this working directory.
        condition: ${{ parameters.condition }} # Evaluate this condition expression to determine whether to run this task.
        continueOnError: ${{ parameters.continueOnError }} # Continue running even on failure?
        displayName: "${{ parameters.displayName }}" # Human-readable name for the task.
        target: "${{ parameters.target }}" # Environment in which to run this task.
        enabled: ${{ parameters.enabled }}  # Run this task when the job runs?
        ${{ if ne(convertToJson(parameters.env), '[]') }}:
          env:
            ${{ parameters.env }}
        ${{ if ne(parameters.name, '') }}:
          name: ${{ parameters.name }}
        timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
        retryCountOnTaskFailure: ${{ parameters.retryCountOnTaskFailure }}
        